import java.nio.file.Files
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.40"
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.3.72'
    }
}


plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group 'tech.justagod'
archivesBaseName = 'cutter'
version '2.1.0-SNAPSHOT'


targetCompatibility = sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
sourceSets {
    main {
        compileKotlin.destinationDir = compileJava.destinationDir
    }
}

evaluationDependsOnChildren()


jar {
    archiveName = "cutter.jar"
}

test.dependsOn(jar)

test {
    workingDir = rootProject.rootDir
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty("sonatypeUsername")) {
    signing {
        sign configurations.archives
    }
    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'Cutter'
                    packaging 'jar'

                    description 'Gradle plugin to simplify mods protection'
                    url 'https://gitlab.com/hvalick2111/cutter'


                    scm {
                        connection 'scm:git:https://gitlab.com/hvalick2111/cutter.git'
                        developerConnection 'scm:git:https://gitlab.com/hvalick2111/cutter.git'
                        url 'https://gitlab.com/hvalick2111/cutter'
                    }

                    licenses {
                        license {
                            name = 'MIT License'
                        }
                    }

                    developers {
                        developer {
                            id = 'JustAGod'
                            name = 'Yury Barinov'
                            email = 'hvalick2111@gmail.com'
                        }
                    }
                }
            }
        }
    }
    task relocateShadowJar(type: ConfigureShadowRelocation) {
        target = tasks.shadowJar
    }

    tasks.shadowJar.dependsOn tasks.relocateShadowJar
    tasks.uploadShadow.dependsOn tasks.appendDefaultLib
}

configurations {
    testCompile.extendsFrom(shadow)
}

dependencies {
    shadow gradleApi()
    shadow 'org.zeroturnaround:zt-zip:1.12'
    compile 'org.ow2.asm:asm-tree:8.0.1'
    shadow "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.40"

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

def defaultsProj = project(':Defaults')

task appendDefaultLib(type: Jar) {
    archiveName = 'cutter.jar.tmp'
    from zipTree(project.file('build/libs/cutter.jar'))
    into('defaults') {
        from(project.fileTree(defaultsProj.file("build/libs")))
    }
    doLast {
        Files.deleteIfExists(project.file('build/libs/cutter.jar').toPath())
        Files.move(project.file('build/libs/cutter.jar.tmp').toPath(), project.file('build/libs/cutter.jar').toPath())
    }

}

appendDefaultLib.dependsOn shadowJar


appendDefaultLib.dependsOn(defaultsProj.tasks.getByPath("jar"))
appendDefaultLib.dependsOn(defaultsProj.tasks.sourcesJar)
appendDefaultLib.dependsOn(defaultsProj.tasks.javadocJar)

shadowJar {
    classifier = null
    archiveName = "cutter.jar"
    relocate 'org.objectweb', 'shadow.org.objectweb'
}


idea {
    module {
        excludeDirs += project.file('forge')
        excludeDirs += project.file('gradle-test')
    }
}

